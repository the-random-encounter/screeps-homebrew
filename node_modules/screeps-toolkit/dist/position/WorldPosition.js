import { ROOM_MAX, ROOM_MIN } from "./constants";
import { getChebyshevDist, getDirectionTo, normalizePos, parseRoomName } from "./utils";
/** Uniform screep's world position with E0S0 as origin. */
export class WorldPosition {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    /**
     * Extract room name from this.
     * In sim, it will return E0S0.
     * @returns the room name
     */
    getRoomName() {
        const [x, y] = [Math.floor(this.x / 50), Math.floor(this.y / 50)];
        let result = "";
        result += x < 0 ? "W" + String(~x) : "E" + String(x);
        result += y < 0 ? "N" + String(~y) : "S" + String(y);
        return result;
    }
    /**
     * Convert a {@link RoomPosition} to {@link WorldPosition}
     * @param at Object containing a position
     * @returns this
     */
    static fromRoom(at) {
        const { x, y, roomName } = normalizePos(at);
        if (x < ROOM_MIN || x > ROOM_MAX)
            throw new RangeError(`x value ${x} not in range`);
        if (y < ROOM_MIN || y > ROOM_MAX)
            throw new RangeError(`y value ${y} not in range`);
        if (roomName == "sim")
            return new WorldPosition(x, y);
        let [, h, wx, v, wy] = parseRoomName(roomName);
        if (h == "W")
            wx = ~wx;
        if (v == "N")
            wy = ~wy;
        return new WorldPosition(50 * wx + x, 50 * wy + y);
    }
    /**
     * Convert this to {@link RoomPosition}
     * @returns a RoomPosition representing same position
     */
    toRoom() {
        let [rx, x] = [Math.floor(this.x / 50), this.x % 50];
        let [ry, y] = [Math.floor(this.y / 50), this.y % 50];
        if (rx < 0 && x < 0)
            x = 49 - ~x;
        if (ry < 0 && y < 0)
            y = 49 - ~y;
        return new RoomPosition(x, y, this.getRoomName());
    }
    getRangeTo(to) {
        return getChebyshevDist(this, to);
    }
    inRangeTo(to, range = 1) {
        return this.getRangeTo(to) <= range;
    }
    getDirectionTo(to) {
        return getDirectionTo(this, to);
    }
    toString() {
        return `[world pos ${this.x},${this.y}]`;
    }
}
//# sourceMappingURL=WorldPosition.js.map