/// <reference types="screeps" />
import { HasPos, RoomName, Coordinates } from "./types";
/**
 * Whether or not this position is an exit. Ignoring terrain.
 * @param at A room position
 * @returns Is this position at the edge of the room
 */
export declare function isExit(at: Coordinates): boolean;
/**
 * Extract position from an object with a position
 * @param it Object with a position
 * @returns The RoomPosition
 */
export declare function normalizePos(it: RoomPosition | HasPos): RoomPosition;
/**
 * Split a room name in parts
 * @param roomName Valid name of a room
 * @returns Room name parts [full string, WE, x, NS, y]
 */
export declare function parseRoomName(roomName: RoomName): [string, "W" | "E", number, "N" | "S", number];
/**
 * Compute center position of a room
 * @param name valid room name
 * @returns position at the middle of this room
 */
export declare const getRoomCenter: (name: RoomName) => RoomPosition;
/**
 * Distance when moving only vertically, horizontally and diagonally.
 * Correct distance for creep movements.
 * @param a First point
 * @param b Second point
 * @returns Chebyshev distance between those points
 */
export declare function getChebyshevDist(a: Coordinates, b: Coordinates): number;
/**
 * Distance when moving only vertically or horizontally.
 * @param a First point
 * @param b Second point
 * @returns Manhattan distance between those points
 */
export declare function getManhattanDist(a: Coordinates, b: Coordinates): number;
/**
 * Distance when moving at any angle.
 * @param a First point
 * @param b Second point
 * @returns Euclidean distance between those points
 */
export declare function getEuclidDist(a: Coordinates, b: Coordinates): number;
/**
 * Compute the nearest angle between two point round to 8 directions
 * @param from First point
 * @param to Second point
 * @returns Direction constant
 */
export declare function getDirectionTo(from: Coordinates, to: Coordinates): DirectionConstant;
